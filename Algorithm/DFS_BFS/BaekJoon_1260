import java.util.*;
import java.io.*;

public class BaekJoon_1260 {
	
		static int[][] graph;
    static boolean marked[];
    static int n;
    
    public static void main(String[] args) throws Exception {
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        int v = Integer.parseInt(st.nextToken());
        
        graph = new int[n+1][n+1];
        marked = new boolean[n+1];
          
        for(int i = 0; i<m; i++) {
        	st = new StringTokenizer(br.readLine());
          int a = Integer.parseInt(st.nextToken());
          int b = Integer.parseInt(st.nextToken());
        	graph[a][b] = graph[b][a] = 1;
        }
          
        dfs(v);
        System.out.println();
        reset();
        bfs(v);
    }
      
    
   private static void dfs(int v) {
	   Stack<Integer> stack = new Stack<>();
	   stack.push(v);
	   
	   while(!stack.isEmpty()) {
		   int temp = stack.pop();
		   if(marked[temp] == false) {
			   marked[temp] = true;
			   System.out.print( temp + " " );
		   }
		   for(int i = n; i>=1; i--) {
			   if(graph[temp][i] == 1 && marked[i] == false) {
				   stack.push(i);
			   }
		   }
	   }
   }
    
    
    
    private static void dfsR(int v){
        marked[v] = true;
        System.out.print(v+" ");
          
        for(int i=1; i<=n; i++){
            if(graph[v][i]== 1 && marked[i] == false){
                dfsR(i);
            }
        }
    }
      
    private static void bfs(int v){
        Queue<Integer> queue = new LinkedList<Integer>();
        queue.offer(v);
        marked[v] = true;
        System.out.print(v+" ");

        while(!queue.isEmpty()){
            int temp = queue.poll();
            for(int i = 1; i<=n; i++){
                if(graph[temp][i] == 1 && marked[i] == false){
                    queue.offer(i);
                    marked[i]=true;
                    System.out.print(i+" ");
                }
            }                       
        }
    }
    
    private static void reset() {
    	for(int i = 0; i<=n; i++) {
    		marked[i] = false;
    	}
    }
}
